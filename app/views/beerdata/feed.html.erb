
<div class="navbar">
    <ul>
      <li>TappData</li>
    </ul>
</div>
<!-- stacked bar chart!! -->
<div id="main-container">


  <div class="form-div">
    <%= form_tag(beerdata_feed_path, :method => :get) do%>
      <%= label_tag 'username', "Untappd Username:" %>
      <%= text_field_tag 'username' %>
      <%= submit_tag 'Enter', :class => 'enter-btn' %>
    <% end %>
  </div>

<div class="display-name"><%= @username.capitalize %>'s most consumed beers per month</div>

  <div class="color-legend">
    <ul class="legend-bar">
      <li>January</li>
      <li><div class="jan-color"></div></li>
      <li><div class="early-spring-color"></div></li>
      <li><div class="spring-color"></div></li>
      <li><div class="early-fall-color"></div></li>
      <li><div class="fall-color"></div></li>
      <li><div class="dec-color"></div></li>    
      <li>December</li>
    <ul>
  </div>
  <div id="chart">
    
  </div>
  <div class ="buttons">
      <button class="first" id="group" onclick="transitionGroup()">Group</button>
      <button class="last active" id="stack" onclick="transitionStack()">Stack</button>
    </div>

<div class="display-name">Most occurring words in descriptions of <%= @username.capitalize %>'s beers</div>
<div id="bubblechart"></div>

 <script>

var n = 12, // number of layers (months)
     m = 11, // number of samples per layer (beer styles)
     beerMonths = <%= raw @beer_months_object.to_json %>,
     // data = [[{x: 0, y: 23}, {x:1, y:43}, {x:2, y:76}, {x:3,y:76}],
     //     [{x:0, y:53}, {x:1, y:86}, {x:2, y:23}, {x:3,y:12}],
     //     [{x:0, y:54}, {x:1,y:76}, {x:2, y:95}, {x:3, y:31}], 
     //     [{x:0, y:71}, {x:1,y:23}, {x:2, y:52}, {x:3,y:43}]],

     data = d3.layout.stack()(beerMonths),
     color = d3.interpolateRgb("#FFECA0", "#491119");
     console.log(data);
 
 var p = 20,
     w = 1100,
     h = 450 - .5 - p,
     beerStyles=["Porter", "Stout", "Brown Ale", "Pale Ale", "Wheat Beer", "Other Ale", "Pilsner", "American Lager", "Other Lager", "Cider", "Other"],

     mx = m,
     my = d3.max(data, function(d) {
       return d3.max(d, function(d) {
         return d.y0 + d.y;
       });
     }),
     mz = d3.max(data, function(d) {
       return d3.max(d, function(d) {
         return d.y;
       });
     }),
     x = function(d) { return d.x * w / mx; },
     y0 = function(d) { return h - d.y0 * h / my; },
     y1 = function(d) { return h - (d.y + d.y0) * h / my; },
     y2 = function(d) { return d.y * h / mz; }; // or `my` to not rescale
 
 var vis = d3.select("#chart")
   .append("svg:svg")
     .attr("width", w)
     .attr("height", h + p);
 
 var layers = vis.selectAll("g.layer")
     .data(data)
   .enter().append("svg:g")
     .style("fill", function(d, i) { return color(i / (n - 1)); })
     .attr("class", "layer");
 
 var bars = layers.selectAll("g.bar")
     .data(function(d) { return d; })
   .enter().append("svg:g")
     .attr("class", "bar")
     .attr("transform", function(d) { return "translate(" + x(d) + ",0)"; });

 bars.append("svg:rect")
     .attr("width", x({x: .9}))
     .attr("x", 0)
     .attr("y", h)
     .attr("height", 0)
   .transition()
     .delay(function(d, i) { return i * 10; })
     .attr("y", y1)
     .attr("height", function(d) { return y0(d) - y1(d); });
 
 var labels = vis.selectAll("text.label")
     .data(data[0])
   .enter().append("svg:text")
     .attr("class", "label")
     .attr("x", x)
     .attr("y", h + 6)
     .attr("dx", x({x: .45}))
     .attr("dy", ".71em")
     .attr("text-anchor", "middle")
     .text(function(d, i) { return beerStyles[i]; });
 
 vis.append("svg:line")
     .attr("x1", 0)
     .attr("x2", w - x({x: .1}))
     .attr("y1", h)
     .attr("y2", h);
 
 function transitionGroup() {
   var group = d3.selectAll("#chart");
 
   group.select("#group")
       .attr("class", "first active");
 
   group.select("#stack")
       .attr("class", "last");
 
   group.selectAll("g.layer rect")
     .transition()
       .duration(500)
       .delay(function(d, i) { return (i % m) * 10; })
       .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); })
       .attr("width", x({x: .9 / n}))
       .each("end", transitionEnd);
 
   function transitionEnd() {
     d3.select(this)
       .transition()
         .duration(500)
         .attr("y", function(d) { return h - y2(d); })
         .attr("height", y2);
   }
 }
 
 function transitionStack() {
   var stack = d3.select("#chart");
 
   stack.select("#group")
       .attr("class", "first");
 
   stack.select("#stack")
       .attr("class", "last active");
 
   stack.selectAll("g.layer rect")
     .transition()
       .duration(500)
       .delay(function(d, i) { return (i % m) * 10; })
       .attr("y", y1)
       .attr("height", function(d) { return y0(d) - y1(d); })
       .each("end", transitionEnd);
 
   function transitionEnd() {
     d3.select(this)
       .transition()
         .duration(500)
         .attr("x", 0)
         .attr("width", x({x: .9}));
   }



 }









//bubble chart showing most occurring words in user's beer descriptions



 // var data ={"children": [{"color": "blue", "children": [{"name": "vanilla", "size": 11}, {"name": "chocolate", "size": 4}, {"name": "mint", "size": 6}]}]};
 var data = <%= raw @words_object.to_json %>,
    color = d3.rgb("#deb887");
  //d3.json(url, function( error, data) {

    console.log(data); // sanity check

    var r = 800, // setting this up as a "side" for our canvas
    format = d3.format(",d"), // formats as integer
    fill = d3.scale.category10(); // colors by ordinal scale

    var bubble = d3.layout.pack() // pack layout lends to bubble chart. whole canvas not individual bubbles
      .sort(null) // runs a comparator if you want to do some sorting (we aren't here)
      .size([r, r]) // defaults to 1x1 unless this is specified [x, y]
      .padding(2); // how much space between each bubble

    var vis = d3.selectAll("#bubblechart").append("svg") // puts a svg inside of the bubblechart div
      .attr("width", r) // svg canvas is r wide
      .attr("height", r) // svg canvas is r tall (it's a square)
      .attr("class", "bubble"); // add class "bubble" to svg 

    var node = vis.selectAll("g.node")  // setting up nodes with a select within the svg we set up when we declared vis above
      .data(bubble.nodes(classes(data)) // looks more complex than it is -- we're flattening stuff via bubble (above) and classes (below)
      .filter(function(d) { return !d.children; }))
      .enter().append("g") // g is a D3 thing that groups svg shapes
         .attr("class", "node")
         .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")";  }); // this gives us the spiraling effect of the bubbles by translating the position (x,y) of each next node


      node.append("title") // adds a title attribute to each node 
        .text(function(d) { return d.flavorSize; });

      node.append("circle") // makes these visuals bubbles
        .attr("r", function(d) { return d.r; }) // sets the radius of each bubble
        .style("fill", color); // fills the bubble with the color appropriate to the package

      node.append("text") //add text to top of each bubble
        .attr("text-anchor", "middle") //places text in middle of node
        .attr("dy", ".3em") //sizes font
        .text(function(d) { return d.flavorName;}); //text is equal to name

    // Awesome function courtesy of Mike Bostock/Jeff Heer
    // Returns a flattened hierarchy containing all leaf nodes under the root.

    function classes(root) {
          var classes = [];

          function recurse(color, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.color, child); });
            else classes.push({packageName: color, flavorName: node.name, value: node.size});
          }

          recurse(null, root);
          return {children: classes};
        }
        
  //});



</script>
   
   <div class="bottom-border"></div>
</div>
