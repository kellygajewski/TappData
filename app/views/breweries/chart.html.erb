<div id="chart2"></div>

<script>

	var data = [4, 8, 15, 16, 23, 42];


	var chart2 = d3.select("body")
		.append("svg:svg")
			.attr("class", "chart")
			.attr("width", 440)
			.attr("height", 140) //20 * data.length
		.append("svg:g")
			.attr("transform", "translate(10, 15)");
	
	var x = d3.scale.linear()
		.domain([0, d3.max(data)])
		.range([0, 420]);

	var y = d3.scale.ordinal()
		.domain(data)
		.rangeBands([0, 120]);

	chart2.selectAll("line")
		.data(x.ticks(10))
	  .enter().append("svg:line")
	  	.attr("x1", x)
	  	.attr("x2", x)
	  	.attr("y1", 0)
	  	.attr("y2", 120)
	  	.attr("stroke", "#ccc");

	chart2.selectAll("rect")
		.data(data)
	  .enter().append("svg:rect")
	  	.attr("y", y)
		.attr("width", x)
		.attr("height", y.rangeBand())
		.style("fill", "steelblue")
		.style("stroke", "white");

	chart2.selectAll("text")
		.data(data)
	  .enter().append("svg:text")
	  	.attr("x", x)
	  	.attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
	  	.attr("dx", -3)
	  	.attr("dy", ".35em")
	  	.attr("text-anchor", "end")
	  	.text(String)
	  	.style("stroke", "white");

	chart2.selectAll("text.rule")
     	.data(x.ticks(10))
   	  .enter().append("svg:text")
     	.attr("class", "rule")
     	.attr("x", x)
     	.attr("y", 0)
     	.attr("dy", -3)
     	.attr("text-anchor", "middle")
     	.text(String);
	
	chart2.append("svg:line")
     	.attr("y1", 0)
     	.attr("y2", 120)
     	.attr("stroke", "#000");
</script>
<button class="first" id="group" onclick="transitionGroup()">Group</button>
<button class="last active" id="stack" onclick="transitionStack()">Stack</button>
<div id="chart"></div>

<script>
   function stream_layers(n, m, o) {
   if (arguments.length < 3) o = 0;
   function bump(a) {
     var x = 1 / (.1 + Math.random()),
         y = 2 * Math.random() - .5,
         z = 10 / (.1 + Math.random());
     for (var i = 0; i < m; i++) {
       var w = (i / m - y) * z;
       a[i] += x * Math.exp(-w * w);
     }
   }
   return d3.range(n).map(function() {
       var a = [], i;
       for (i = 0; i < m; i++) a[i] = o + o * Math.random();

       for (i = 0; i < 5; i++) bump(a);

       console.log( a.map(stream_index));
   return a.map(stream_index);
     });
 }

  function stream_index(d, i) {
   return {x: i, y: Math.max(0, d)};
 }

var n = 4, // number of layers
     m = 4, // number of samples per layer
     // data = [[{x: 0, y: 23}, {x:1, y:43}, {x:2, y:76}, {x:3,y:76}],
     // 		[{x:0, y:53}, {x:1, y:86}, {x:2, y:23}, {x:3,y:12}],
     // 		[{x:0, y:54}, {x:1,y:76}, {x:2, y:95}, {x:3, y:31}], 
     // 		[{x:0, y:71}, {x:1,y:23}, {x:2, y:52}, {x:3,y:43}]],
     data = d3.layout.stack()([[{x: 0, y: 23}, {x:1, y:43}, {x:2, y:76}, {x:3,y:76}],
      		[{x:0, y:53}, {x:1, y:86}, {x:2, y:23}, {x:3,y:12}],
      		[{x:0, y:54}, {x:1,y:76}, {x:2, y:95}, {x:3, y:31}], 
      		[{x:0, y:71}, {x:1,y:23}, {x:2, y:52}, {x:3,y:43}]]),
     color = d3.interpolateRgb("#aad", "#556");
     console.log(data);
 
 var p = 20,
     w = 960,
     h = 500 - .5 - p,
     mx = m,
     my = d3.max(data, function(d) {
       return d3.max(d, function(d) {
         return d.y0 + d.y;
       });
     }),
     mz = d3.max(data, function(d) {
       return d3.max(d, function(d) {
         return d.y;
       });
     }),
     x = function(d) { return d.x * w / mx; },
     y0 = function(d) { return h - d.y0 * h / my; },
     y1 = function(d) { return h - (d.y + d.y0) * h / my; },
     y2 = function(d) { return d.y * h / mz; }; // or `my` to not rescale
 
 var vis = d3.select("#chart")
   .append("svg:svg")
     .attr("width", w)
     .attr("height", h + p);
 
 var layers = vis.selectAll("g.layer")
     .data(data)
   .enter().append("svg:g")
     .style("fill", function(d, i) { return color(i / (n - 1)); })
     .attr("class", "layer");
 
 var bars = layers.selectAll("g.bar")
     .data(function(d) { return d; })
   .enter().append("svg:g")
     .attr("class", "bar")
     .attr("transform", function(d) { return "translate(" + x(d) + ",0)"; });

 bars.append("svg:rect")
     .attr("width", x({x: .9}))
     .attr("x", 0)
     .attr("y", h)
     .attr("height", 0)
   .transition()
     .delay(function(d, i) { return i * 10; })
     .attr("y", y1)
     .attr("height", function(d) { return y0(d) - y1(d); });
 
 var labels = vis.selectAll("text.label")
     .data(data[0])
   .enter().append("svg:text")
     .attr("class", "label")
     .attr("x", x)
     .attr("y", h + 6)
     .attr("dx", x({x: .45}))
     .attr("dy", ".71em")
     .attr("text-anchor", "middle")
     .text(function(d, i) { return i; });
 
 vis.append("svg:line")
     .attr("x1", 0)
     .attr("x2", w - x({x: .1}))
     .attr("y1", h)
     .attr("y2", h);
 
 function transitionGroup() {
   var group = d3.selectAll("#chart");
 
   group.select("#group")
       .attr("class", "first active");
 
   group.select("#stack")
       .attr("class", "last");
 
   group.selectAll("g.layer rect")
     .transition()
       .duration(500)
       .delay(function(d, i) { return (i % m) * 10; })
       .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); })
       .attr("width", x({x: .9 / n}))
       .each("end", transitionEnd);
 
   function transitionEnd() {
     d3.select(this)
       .transition()
         .duration(500)
         .attr("y", function(d) { return h - y2(d); })
         .attr("height", y2);
   }
 }
 
 function transitionStack() {
   var stack = d3.select("#chart");
 
   stack.select("#group")
       .attr("class", "first");
 
   stack.select("#stack")
       .attr("class", "last active");
 
   stack.selectAll("g.layer rect")
     .transition()
       .duration(500)
       .delay(function(d, i) { return (i % m) * 10; })
       .attr("y", y1)
       .attr("height", function(d) { return y0(d) - y1(d); })
       .each("end", transitionEnd);
 
   function transitionEnd() {
     d3.select(this)
       .transition()
         .duration(500)
         .attr("x", 0)
         .attr("width", x({x: .9}));
   }


 }
</script>
 
        // <script type="text/javascript">
 
        //     var w = 960,
        //     h = 500
 
        //     // create canvas
        //     var svg = d3.select("#viz").append("svg:svg")
        //     .attr("class", "chart")
        //     .attr("width", w)
        //     .attr("height", h )
        //     .append("svg:g")
        //     .attr("transform", "translate(10,470)");
 
        //     x = d3.scale.ordinal().rangeRoundBands([0, w-50])
        //     y = d3.scale.linear().range([0, h-50])
        //     z = d3.scale.ordinal().range(["darkblue", "blue", "lightblue"])
 
        //     console.log("RAW MATRIX---------------------------");
        // // 4 columns: ID,c1,c2,c3
        //     var matrix = [
        //         [ 1,  5871, 8916, 2868],
        //         [ 2, 10048, 2060, 6171],
        //         [ 3, 16145, 8090, 8045],
        //         [ 4,   990,  940, 6907],
        //         [ 5,   450,  430, 5000]
        //     ];
        //     console.log(matrix)
 
        //     console.log("REMAP---------------------------");
        //     var remapped =["c1","c2","c3"].map(function(dat,i){
        //         return matrix.map(function(d,ii){
        //             return {x: ii, y: d[i+1] };
        //         })
        //     });
        //     console.log(remapped)
 
        //     console.log("LAYOUT---------------------------");
        //     var stacked = d3.layout.stack()(remapped)
        //     console.log(stacked)
 
        //     x.domain(stacked[0].map(function(d) { return d.x; }));
        //     y.domain([0, d3.max(stacked[stacked.length - 1], function(d) { return d.y0 + d.y; })]);
 
        //     // show the domains of the scales
        //     console.log("x.domain(): " + x.domain())
        //     console.log("y.domain(): " + y.domain())
        //     console.log("------------------------------------------------------------------");
 
        //     // Add a group for each column.
        //     var valgroup = svg.selectAll("g.valgroup")
        //     .data(stacked)
        //     .enter().append("svg:g")
        //     .attr("class", "valgroup")
        //     .style("fill", function(d, i) { return z(i); })
        //     .style("stroke", function(d, i) { return d3.rgb(z(i)).darker(); });
 
        //     // Add a rect for each date.
        //     var rect = valgroup.selectAll("rect")
        //     .data(function(d){return d;})
        //     .enter().append("svg:rect")
        //     .attr("x", function(d) { return x(d.x); })
        //     .attr("y", function(d) { return -y(d.y0) - y(d.y); })
        //     .attr("height", function(d) { return y(d.y); })
        //     .attr("width", x.rangeBand());
 
        // </script>